{
  "name": "irc-message",
  "version": "1.0.0",
  "description": "A blazing fast parser for IRC messages.",
  "main": "index.js",
  "scripts": {
    "prepublish": "coffee --bare --compile lib/*.coffee && coffee --bare --compile test/*.coffee",
    "build": "coffee --bare --compile lib/*.coffee && coffee --bare --compile test/*.coffee",
    "test": "vows --spec test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/expr/irc-message.git"
  },
  "devDependencies": {
    "vows": "0.7.x",
    "chai": "1.8.x",
    "coffee-script": "1.6.3"
  },
  "keywords": [
    "irc",
    "message",
    "parser",
    "chat"
  ],
  "author": {
    "name": "Fionn Kelleher",
    "email": "me@fionn.co"
  },
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/expr/irc-message/issues"
  },
  "homepage": "https://github.com/expr/irc-message",
  "readme": "# irc-message [![Build Status](https://travis-ci.org/expr/irc-message.png)](https://travis-ci.org/expr/irc-message)\n> A blazing fast parser for [IRC messages](http://tools.ietf.org/html/rfc2812#section-2.3.1).\n\n## Why?\n\nirc-message is designed with performance in mind. IRC is a real-time protocol. As such, it's important IRC data is dealt with and used as quickly as possible. As a result:\n\n- irc-message's main parsing method makes no use of regular expressions.\n- irc-message only provides the data it's delegated with handling. It parses raw IRC messages similarly to [the specification in RFC1459](http://tools.ietf.org/html/rfc2812#section-2.3.1).\n- There are very little calls to String.split(). irc-message's parser goes through each part of the IRC message, character by character.\n\n## Installation\n\n    npm install irc-message\n\n## Usage\n\n```JavaScript\nvar Message = require(\"irc-message\");\n\nvar parsed = Message(\"@time=2013-06-30T23:59:60.419Z :jamie!jamie@127.0.0.1 PRIVMSG #Node.js :Hello! I was just  browsing for Node.js help, found this channel.\");\n\nconsole.log(JSON.stringify(parsed));\n```\n\n```JSON\n{\n    \"tags\": {\n        \"time\": \"2013-06-30T23:59:60.419Z\"\n    },\n    \"prefix\": \"jamie!jamie@127.0.0.1\",\n    \"command\": \"PRIVMSG\",\n    \"params\": [\"#Node.js\", \"Hello! I was just  browsing for Node.js help, found this channel.\"]\n}\n```\n\nWhen a Message object is created, it contains the following properties:\n\n- `tags` - An object with any [IRCv3.2 message tags](http://ircv3.org/specification/message-tags-3.2), if present. Tags with no corresponding value are given a value of `true`.\n- `prefix` - A string with the message prefix.\n- `command` - A string with the message command.\n- `params` - An array with the message's parameters.\n\nIf the message is invalid, `null` wil be returned.\n\n**NOTE:** In 0.x.x, irc-message objects were created by using the `new` keyword and threw an error if parsing failed. Starting from 1.x.x, irc-message exports a function that takes the raw line. If it is valid, an IRCMessage object will be returned. If not, `null` will be returned.\n\n## Utilities\n\n### #toString()\n\nConverts an irc-message object to a string of IRC data (minus CRLF) suitable to be streamed/sent to an IRC server.\n\n```JavaScript\nvar Message = require(\"irc-message\");\n\nvar message = Message(\":jamie!jamie@127.0.0.1 PRIVMSG #Node.js :A message\");\n\nconsole.log(message.toString()); // :jamie!jamie@127.0.0.1 PRIVMSG #Node.js :A message\n```\n\n### #parseHostmaskFromPrefix()\n\nParses the hostmask from the message prefix. Object returned will contain keys for `nickname`, `username` and `hostname`.\n\n```JavaScript\nvar Message = require(\"irc-message\");\n\nvar message = Message(\":jamie!jamie@127.0.0.1 PRIVMSG #Node.js :A message\");\nvar hostmask = message.parseHostmaskFromPrefix();\n\nconsole.log(JSON.stringify(hostmask));\n```\n\n### #prefixIsHostmask()\n\nReturns `true` if the prefix of the message is a hostmask.\n\n```JavaScript\nvar Message = require(\"irc-message\");\n\nvar message1 = Message(\":jamie!jamie@127.0.0.1 PRIVMSG #Node.js :A message\");\nvar message2 = Message(\":test.services. PRIVMSG #Node.js :A message\");\n\nconsole.log(message1.prefixIsHostmask());\nconsole.log(message2.prefixIsHostmask());\n```\n\n### #prefixIsServer()\n\nReturns `true` if the prefix of the message is a server.\n\n```JavaScript\nvar Message = require(\"irc-message\");\n\nvar message1 = Message(\":jamie!jamie@127.0.0.1 PRIVMSG #Node.js :A message\");\nvar message2 = Message(\":test.services. PRIVMSG jamie :This is test.services. speaking!\");\n\nconsole.log(message1.prefixIsServer());\nconsole.log(message2.prefixIsServer());\n```\n\n## Credit\n\n**Jon Portnoy** (avenj) for his own [IRC parser in Perl](http://metacpan.org/release/POE-Filter-IRCv3). His original implementation and assistance has been invaluable.\n\n## Support\n\nIf you need support or notice a bug, feel free to open an issue on the repo, or alternatively join `#expr` on freenode.\n",
  "readmeFilename": "README.md",
  "_id": "irc-message@1.0.0",
  "dist": {
    "shasum": "ff0ca836ff2b8b5ef70682ee56f5c0bcd5a55f97"
  },
  "_from": "irc-message@",
  "_resolved": "https://registry.npmjs.org/irc-message/-/irc-message-1.0.0.tgz"
}
